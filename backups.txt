***BEFORE WE REMOVED THE COMMENTS
    public checkForCollision() {
        let ship = this.modelService.ship;
        let b = this;
        // if (!_.isObject(b)) { // there's a chance the component got _.pull already
        //     return;
        // }

        // let bulletsCollided = false;
        // _.each(this.modelService.bullets, b2 => {
        //     if (b.component !== b2.component && b.component.fromShip !== b2.component.fromShip && Math.abs(b.component.x - b2.component.x) < this.modelService.CONSTS.bullet.width && Math.abs(b.component.y - b2.component.y) < this.modelService.CONSTS.bullet.height) {
        //         b.component.destroy();
        //         b2.component.destroy();
        //         bulletsCollided = true;
        //     }
        //     return !bulletsCollided;
        // });
        // if (bulletsCollided) {
        //     return false;
        // }
        let shieldGotHit = false;
        if (b.y < this.modelService.CONSTS.shield.startingY + this.modelService.CONSTS.bullet.height) { // FOR PERFORMANCE: only run the loop if bullet.y is inside shield.y area
            console.log('running each');
            _.each(this.modelService.shields, s => {
                if (Math.abs(b.x - (s.component.x + (this.modelService.CONSTS.shield.width / 2))) <= this.modelService.CONSTS.shield.width / 2 && Math.abs(s.component.y - b.y) < this.modelService.CONSTS.bullet.height) {
                    // console.log('hit shield area (x,y point may be destroyed tho)');
                    let col = Math.abs(b.x - s.component.x);
                    shieldGotHit = s.component.removePixel(col, b.fromShip);
                    return !shieldGotHit;
                }
            });
        }
        if (shieldGotHit) {
            b.destroy();
            return false;
        }
        // TODO improve y axis collision detection (just like with did with axis x)
        _.each(this.modelService.enemies, e => {
            // if (!_.isObject(e)) { // there's a chance the component got _.pull already
            //     return;
            // }
            if (b.fromShip) {
                if (Math.abs(b.x - (e.component.x + (this.modelService.CONSTS.enemy.width / 2))) <= this.modelService.CONSTS.enemy.width / 2 && Math.abs(e.component.y - b.y) < this.modelService.CONSTS.bullet.height) {
                    b.destroy();
                    e.component.destroy();
                }
            }
        });
        if (!b.fromShip && Math.abs(b.x - (ship.x + (this.modelService.CONSTS.ship.width / 2))) <= this.modelService.CONSTS.ship.width / 2 && Math.abs(b.y - ship.y) < this.modelService.CONSTS.bullet.height) {
            this.modelService.ship.gotHit();
            return false;
        }
    }